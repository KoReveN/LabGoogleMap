@model MapViewModel
@{
    //  ViewData["Title"] = "Home Page";
    ViewBag.Title = "Google map";
}




<div class="space-10"></div>

<div class="row">Please select color of marker:</div>

<div id="test1"></div>

<div>
    Current marker:
    @*@Html.GetEnumSelectList(typeof(Domain.Entities.MarkerType))*@

    <select id="markerType" asp-items="@Html.GetEnumSelectList(typeof(Domain.Entities.MarkerType))"></select>
</div>

<div class="space-20"></div>
<div class="row">
    <div id="colorSelect"></div>
    <input id="deleteMarkers" type=button value="Delete Markers">
    <input id="buildRoute" type=button value="Build route">
</div>

<div class="space-20"></div>

<div id="routeTable"></div>

<div class="space-20"></div>
<div id="map"></div>




@section scripts
    {
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyA3YhAyyckDAMFGuVR7yRI-fG_NATvL8Yk" defer></script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyA3YhAyyckDAMFGuVR7yRI-fG_NATvL8Yk&libraries=geometry"></script>
    <script defer>
        //require(["jquery", "kendogrids", "ajax", "toastr"], function ($, kendoGrid, ajax, toastr) {

        // Settings
        var urlTeamMapMarkerAdd = "@Url.Action("TeamMapMarkerAdd")";
        var urlTeamMapMarkersRemove = "@Url.Action("TeamMapMarkersRemove")";
        var urlTeamMapMarkerRemove = "@Url.Action("TeamMapMarkerRemove")";
        var urlTeamMapMarkersUpdate = "@Url.Action("TeamMapMarkersUpdate")";
        var urlTeamMapGetRoute = "@Url.Action("GetGoogleRoute")";
        var colorDataSource =  @Html.Raw(Json.Serialize(Model.MarkerIcons.ToArray()));
        var modelMarkers = @Html.Raw(Json.Serialize(@Model.Markers.ToArray())); //Json.Encode(Model.Markers.ToArray());

        var needUpdateAllIndex = false;

        var grid;
        var map;
        var labels = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
        var markerIconUrl = "http://maps.google.com/mapfiles/kml/paddle/blu-circle.png";
        var markers = [];

            // Actions
        var actions = {
            addMapMarker: function (data) {
                ajax.json({
                    url: urlTeamMapMarkerAdd,
                    data: data,
                    success: function (responce) {
                        if (responce.success) {
                            if  (responce.markers.length > 1){
                                toastr.success("Updated markers index!");
                                console.log("Updated markers index!");
                                modelMarkers = responce.markers;
                                render.renderMarkersFromModel();
                            } else {
                                toastr.success("Created new marker!");
                                console.log("Created new marker!");
                                helper.addMarker(responce.markers[0]);
                                modelMarkers.push(responce.markers[0]);
                                render.gridRefresh();
                            }
                        } else {
                            toastr.error("Fail addMapMarker: " + responce.message);
                            console.log("Fail addMapMarker: " + responce.message);
                        }
                    },
                    fail: function (msg) {
                        console.log("Failed addMapMarker query.... " + msg);
                        toastr.error("Failed addMapMarker query.... " + msg);
                    }
                });
            },
            removeMarker: function (markerId) {
                ajax.json({
                    url: urlTeamMapMarkerRemove,
                    data: markerId,
                    success: function (responce) {
                        if (responce.success) {
                            toastr.success("Marker deleted!");
                            console.log("Marker deleted!");
                            helper.modelMarkers.removeMarker(markerId);
                        } else {
                            toastr.error("Fail removeMarker: " + responce.message);
                            console.log("Fail removeMarker: " + responce.message);
                        }
                    },
                    fail: function () {
                        console.log("Failed removeMarker query....");
                        toastr.error("Failed removeMarker query....");
                    }
                });
            },
            removeMapMarkers: function (lat, lng, color) {
                ajax.json({
                    url: urlTeamMapMarkersRemove,
                    success: function (responce) {
                        if (responce.success) {
                            toastr.success("Markers was deleted!");
                            console.log("Markers was deleted!");
                            // Clean map markers.
                            render.cleanMapMarkers();
                            markers = [];
                            modelMarkers = [];
                            render.gridRefresh();
                        } else {
                            toastr.error("Fail: " + responce.message);
                            console.log("Fail: " + responce.message);
                        }
                    },
                    fail: function () {
                        console.log("Failed removeMapMarkers query....");
                        toastr.error("Failed removeMapMarkers query....");
                    }
                });
            },
            updateMapMarkers: function(data) {
                ajax.json({
                    url: urlTeamMapMarkersUpdate,
                    data: data,
                    success: function (responce) {
                        if (responce.success) {
                            toastr.success("Updated markers!");
                            modelMarkers = responce.markers;
                            render.renderMarkersFromModel();
                          //  helper.addMarker(responce.markers);
                            console.log("Updated markers!");
                        } else {
                            toastr.error("Fail: " + responce.message);
                            console.log("Fail: " + responce.message);
                        }
                    },
                    fail: function (msg) {
                        console.log("Failed ajax query.... " + msg);
                        toastr.error("Failed ajax query.... " + msg);
                    }
                });
            },
            getRoute: () => {
                ajax.json({
                    url: urlTeamMapGetRoute,
                    data: modelMarkers,
                    success: (response) => {
                        console.log(response);
                    },
                    fail: function (msg) {
                        console.log("Failed ajax query.... " + msg);
                        toastr.error("Failed ajax query.... " + msg);
                    }
                });
            },
        };
        var helper = {
            initIconsDropDownList: function () {
                $('#colorSelect').kendoDropDownList(
                    {
                        dataSource: colorDataSource,
                        dataTextField: "color",
                        dataValueField: "iconUrl",
                        change: function (e) {
                            // markerIconUrl = this.value();
                        }
                    });
            },
            initRouteTable: () => {
                grid = $("#routeTable").kendoGrid(
                    {
                        sortable: true,
                        dataSource: {
                            data: modelMarkers,
                            sort: { field: "index", dir: "asc" }
                        },
                        columns: [
                            { field: "index", title: "№", width: "50px" },
                            {
                                field: "markerType", title: "Point type", width: "90px" ,
                                template: function (dataItem) {
                                    switch (dataItem.markerType) {
                                        case 1:
                                            return "<strong>Start</strong>";
                                            break;
                                        case 2:
                                            return "<strong>End</strong>";
                                            break;
                                        default:
                                            return dataItem.index;
                                    }
                                },
                            },
                            { field: "address", title: "Address" },
                            { field: "lat", title: "Lat"  },
                            { field: "lng", title: "Lng" },
                            { command: { text: "Remove", click: helper.removeMarker }, title: " ", width: "100px"}
                        ],
                        sort: { field: "index", dir: "desc" }
                    }
                ).data("kendoGrid");

                //$(grid.element).kendoDraggable({
                //    filter: "tr",
                //    hint: function (e) {
                //        var item = $('<div class="k-grid k-widget" style="background-color: MediumVioletRed; color: black;"><table><tbody><tr>' + e.html() + '</tr></tbody></table></div>');
                //        return item;
                //    },

                //});

                grid.table.kendoSortable({
                    filter: ">tbody >tr",
                    hint: $.noop,
                    cursor: "move",
                    placeholder: function (element) {
                        return element.clone().addClass("k-state-hover").css("opacity", 0.65);
                    },
                    container: "#routeTable tbody",
                    change: function (e) {
                        var oldIndex = grid.dataSource.getByUid(e.item.data("uid")).index,
                            newIndex = grid.dataSource.data()[e.newIndex].index;
                        helper.modelMarkers.changeMarkerPosition(oldIndex, newIndex)
                    }
                });
            },
            initGoogleMap: function () {
                var myLatLng = { lat: 46.481, lng: 30.758 };

                map = new google.maps.Map(document.getElementById('map'), {
                    center: { lat: 46.481, lng: 30.758 },
                    zoom: 12
                });


                // Add a markers from the viewModel.
                render.renderMarkersFromModel();

                //marker.setIcon(customIcon({
                //    fillColor: '#fff',
                //    strokeColor: '#000'
                //}));
            },
            createGoogleMarker: function (location, map, markerIcon, lable, markerType, index) {
                var marker = new google.maps.Marker({
                    position: location,
                    label: {
                        text: lable, //labelIndex.toString(),//labels[labelIndex++ % labels.length],
                        // color: "#eb3a44",
                        fontSize: "16px",
                        fontWeight: "bold"

                    },
                    icon: {
                        url: markerIcon, //markerIconUrl
                        labelOrigin: new google.maps.Point(33, 21),
                    },
                    //icon: customIcon({
                    //    fillColor: $('#colorSelect').data('kendoDropDownList').value() //markerIconUrl
                    //}),
                    map: map,
                    markerType: markerType,
                    index: index
                });
                return marker;
            },
            // Adds a marker to the map.
            addMarker: function (modelMarker) {

                let marker = helper.createGoogleMarker(
                    myLatLng = { lat: modelMarker.lat, lng: modelMarker.lng },
                    map,
                    colorDataSource.find(x => x.markerIconId == modelMarker.markerIconId).iconUrl,
                    helper.getMarkerLable(modelMarker.index, modelMarker.markerType),
                    modelMarker.markerType,
                    modelMarker.index
                );
                // Add the marker at the clicked location, and add the next-available label
                // from the array of alphabetical characters.

                markers.push(marker);
            },
            getMarkerLable: function (markerIndex, markerType)
            {
                let lable;
                (markerType == 1) ? lable = "S" :
                    (markerType == 2) ? lable = "E" :
                        lable = markerIndex.toString();
                return lable;
            },
            removeMarker: (e) => {
                var ww = e.currentTarget;
                var dataItem = grid.dataItem($(e.currentTarget).closest("tr"));
                actions.removeMarker(dataItem.markerId);
            },
            modelMarkers: {
                getFreeMarkerIndex: function (markerType) {
                    switch (markerType) {
                        case 1: // markerType = Start Point
                            //  if (modelMarkers.find(x => x.markerType == 1))
                            //   {
                            // NEED exempt FOR OLD START POINT
                            /*
                                    modelMarkers.forEach((marker) => {
                                        marker.index ++;
                                        if  (marker.markerType == 1)
                                            marker.markerType = 0;
                                      //  if  (marker.index != 10)
                                      //      marker.label.text = marker.index;
                                    });*/

                            //  actions.updateMapMarkers(modelMarkers);
                            // }
                            $("#markerType").val(0);
                            return 0;
                            break;
                        case 2: // markerType = End Point
                            // NEED CHECK FOR OLD END POINT
                            return 10;
                            break;
                        default: // markerType = Way Point
                            for (var i = 1; i < 10; i++) {
                                if (!modelMarkers.find(x => x.index == i)) {
                                    return i;
                                }
                            }
                            return 1; // default first way point index
                            break;
                    }

                },
                changeMarkerPosition: (oldIndex, newIndex) => {
                    var positionToInsert = modelMarkers.indexOf(modelMarkers.find(x => x.index == newIndex))
                    var item = modelMarkers.find(x => x.index == oldIndex);

                    modelMarkers = modelMarkers.filter(x => x.index != oldIndex);
                    modelMarkers.forEach((curr) => {
                        if (curr.index > oldIndex) {
                            curr.index--;
                        }
                    });
                    modelMarkers.forEach((curr) => {
                        if (curr.index >= newIndex) {
                            curr.index++;
                        }
                    });

                    item.index = newIndex;
                    modelMarkers.splice(positionToInsert, 0, item);

                    render.gridRefresh();
                    actions.updateMapMarkers(modelMarkers);
                },
                removeMarker: (markerId) => {
                    let removeMarkerIndex = modelMarkers.find(x => x.markerId == markerId).index;
                    modelMarkers = modelMarkers.filter(x => x.markerId != markerId);
                    modelMarkers.forEach((marker) => {
                        if (marker.index > removeMarkerIndex) {
                            marker.index--;
                        }
                    });
                    render.gridRefresh();
                    actions.updateMapMarkers(modelMarkers);
                },
            },

        },
        render = {
            renderMarkersFromModel: () => {
                render.cleanMapMarkers();
               // Add a markers from the viewModel.
                $.each(modelMarkers, function (index, item) {
                    helper.addMarker(item);
                });

                render.gridRefresh();
            },
            updateMapMarkers: () => {
                render.cleanMapMarkers();
                render.setMapMarkers();
            },
            cleanMapMarkers: () => { //  Removes the markers from the map
                render.setMapOnAll(null);
            },
            setMapMarkers: () => {
                render.setMapOnAll(map);
                },
            setMapOnAll: (map) => { // Sets the map on all markers in the array.
                for (var i = 0; i < markers.length; i++) {
                    markers[i].setMap(map);
                }
            },
            gridRefresh: () => {
                grid.dataSource.data(modelMarkers);
            },
        }


        function registerEventHandlers()
        {
            // This event listener calls addMarker() when the map is clicked.
            google.maps.event.addListener(map, 'click', function (event) {
                 let markerType = parseInt($("#markerType").val());
                //helper.addMarker(
                //    event.latLng,
                //    map,
                //    $('#colorSelect').data('kendoDropDownList').value(),
                //    helper.getMarkerLable(helper.modelMarkers.getFreeMarkerIndex(markerType), parseInt($("#markerType").val()))
                //);
                actions.addMapMarker(
                    {
                        Lat: event.latLng.lat(),
                        Lng: event.latLng.lng(),
                        MarkerIconId: $('#colorSelect').data('kendoDropDownList').dataItem().markerIconId,
                        MarkerType: markerType,
                        Index: helper.modelMarkers.getFreeMarkerIndex(markerType)
                    }
                )
            });

            $('#deleteMarkers').click(actions.removeMapMarkers);
            $("#buildRoute").click(actions.getRoute);
        }




            //var setModelMarkers = function () {
            //    var markers = modelMarkers; //JSON.parse(modelMarkers);
            //}

        function _init() {

            helper.initRouteTable();
            //google.maps.event.addDomListener(window, 'load', helper.initGoogleMap);
            helper.initGoogleMap();
            //setModelMarkers();
            helper.initIconsDropDownList();

                registerEventHandlers();
            }

            $(document).ready(function () {
                _init();
            });

        //});
    </script>

}



<style>
    /* Always set the map height explicitly to define the size of the div
        * element that contains the map. */
    #map {
        height: 100%;
        min-height: 500px;
    }
    /* Optional: Makes the sample page fill the window. */
    html, body {
        height: 100%;
        margin: 0;
        padding: 0;
    }

    .space-20 {
        height: 20px;
    }
</style>


@{
    //  (синий, красный, зеленый, фиолетовый и белый).
    //var colorDataSource = [
    //    //{ "Name": "Blue", "Value": "#5D85FD" },
    //    //{ "Name": "Red", "Value": "#FC6356" },
    //    //{ "Name": "Green", "Value": "#59FC7D" },
    //    //{ "Name": "Purple", "Value": "#825AFD" },
    //    //{ "Name": "White", "Value": "#FFFFFF" },

    //    //{ "Name": "Blue", "Value": "http://maps.google.com/mapfiles/ms/icons/blue-dot.png" },
    //    //{ "Name": "Red", "Value": "http://maps.google.com/mapfiles/ms/icons/red-dot.png" },
    //    //{ "Name": "Green", "Value": "http://maps.google.com/mapfiles/ms/icons/green-dot.png" },
    //    //{ "Name": "Purple", "Value": "http://maps.google.com/mapfiles/ms/icons/purple-dot.png" },

    //    { "Name": "Blue", "Value": "http://maps.google.com/mapfiles/kml/paddle/blu-blank.png" },
    //    { "Name": "Red", "Value": "http://maps.google.com/mapfiles/kml/paddle/red-blank.png" },
    //    { "Name": "Green", "Value": "http://maps.google.com/mapfiles/kml/paddle/grn-blank.png" },
    //    { "Name": "Purple", "Value": "http://maps.google.com/mapfiles/kml/paddle/purple-blank.png" },
    //    { "Name": "White", "Value": "http://maps.google.com/mapfiles/kml/paddle/wht-blank.png" }
    //];
}



















<div class="text-center">
    <h1 class="display-4">Welcome</h1>
    <p>Learn about <a href="https://docs.microsoft.com/aspnet/core">building Web apps with ASP.NET Core</a>.</p>
</div>
