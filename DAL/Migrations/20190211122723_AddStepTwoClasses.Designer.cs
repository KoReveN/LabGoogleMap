// <auto-generated />
using System;
using DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DAL.Migrations
{
    [DbContext(typeof(LabContext))]
    [Migration("20190211122723_AddStepTwoClasses")]
    partial class AddStepTwoClasses
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Entities.Address", b =>
                {
                    b.Property<int>("PlaceId");

                    b.Property<string>("City");

                    b.Property<int>("CountryId");

                    b.Property<int>("PostalCode");

                    b.Property<string>("Province");

                    b.Property<string>("Remarks");

                    b.Property<string>("Street");

                    b.Property<int>("StreetNumber");

                    b.HasKey("PlaceId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<string>("ISO3166_2_Code");

                    b.Property<string>("Name");

                    b.Property<string>("Telephone_Code");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Entities.Marker", b =>
                {
                    b.Property<int>("MarkerId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomerID");

                    b.Property<int>("Index");

                    b.Property<int>("MarkerIconId");

                    b.Property<int>("MarkerType");

                    b.Property<int>("PointId");

                    b.HasKey("MarkerId");

                    b.HasIndex("MarkerIconId");

                    b.HasIndex("PointId");

                    b.ToTable("Markers");
                });

            modelBuilder.Entity("Entities.MarkerIcon", b =>
                {
                    b.Property<int>("MarkerIconId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Color");

                    b.Property<string>("IconUrl");

                    b.HasKey("MarkerIconId");

                    b.ToTable("MarkerIcons");
                });

            modelBuilder.Entity("Entities.Place", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId");

                    b.Property<string>("Name");

                    b.Property<string>("Phone");

                    b.Property<int>("PintId");

                    b.Property<int?>("PointId");

                    b.Property<int>("Rate");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("PointId");

                    b.ToTable("Places");
                });

            modelBuilder.Entity("Entities.Point", b =>
                {
                    b.Property<int>("PointId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<float>("Lat");

                    b.Property<float>("Lng");

                    b.HasKey("PointId");

                    b.ToTable("Point");
                });

            modelBuilder.Entity("Entities.RouteLeg", b =>
                {
                    b.Property<int>("RouteLegId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Distance");

                    b.Property<int>("Duration");

                    b.Property<int>("EndPoint");

                    b.Property<string>("Polyline");

                    b.Property<int>("StartPoint");

                    b.HasKey("RouteLegId");

                    b.ToTable("RouteLegs");
                });

            modelBuilder.Entity("Entities.Address", b =>
                {
                    b.HasOne("Entities.Place", "Place")
                        .WithOne("Address")
                        .HasForeignKey("Entities.Address", "PlaceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Entities.Marker", b =>
                {
                    b.HasOne("Entities.MarkerIcon", "MarkerIcon")
                        .WithMany()
                        .HasForeignKey("MarkerIconId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Entities.Point", "Point")
                        .WithMany()
                        .HasForeignKey("PointId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Entities.Place", b =>
                {
                    b.HasOne("Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Entities.Point", "Point")
                        .WithMany()
                        .HasForeignKey("PointId");
                });
#pragma warning restore 612, 618
        }
    }
}
